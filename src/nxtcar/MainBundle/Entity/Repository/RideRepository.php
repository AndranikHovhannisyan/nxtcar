<?php

namespace nxtcar\MainBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use nxtcar\MainBundle\Entity\OneTime;

/**
 * RideRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RideRepository extends EntityRepository
{
    const PAGE_COUNT    =  10;
    const PRICE_ASC     =  1;
    const PRICE_DESC    = -1;
    const DATE_ASC      =  2;
    const DATE_DESC     = -2;

    public function findRide($from, $to, $date = null, $timeFrom = null, $timeTo = null, $sort = null, $page)
    {
        if ($date) {
            $dateOutQueryCondition = "AND oneTime.outDate = '$date' ";
            $dateInQueryCondition  = "AND oneTime.inDate = '$date' ";
        }
        else {
            $dateOutQueryCondition = "AND oneTime.outDate >= CURRENT_DATE() ";
            $dateInQueryCondition  = "AND oneTime.inDate >= CURRENT_DATE() ";
        }

        $fromOutQueryCondition = '';
        $fromInQueryCondition  = '';
        $toOutQueryCondition = '';
        $toInQueryCondition  = '';
        if ($timeFrom) {
            $fromOutQueryCondition = "AND oneTime.outHour >= $timeFrom";
            $fromInQueryCondition  = "AND oneTime.inHour >= $timeFrom";
        }
        if ($timeTo) {
            $toOutQueryCondition = "AND oneTime.outHour <= $timeTo";
            $toInQueryCondition  = "AND oneTime.inHour <= $timeTo";
        }

        $orderBy = '';
        if ($sort == self::PRICE_ASC) {
            $orderBy = 'ORDER BY price ASC';
        }
        elseif ($sort == self::PRICE_DESC) {
            $orderBy = 'ORDER BY price DESC';
        }
        elseif ($sort == self::DATE_ASC) {
            $orderBy = 'ORDER BY travelDate ASC, travelHour ASC, travelMinute ASC';
        }
        elseif ($sort == self::PRICE_DESC) {
            $orderBy = 'ORDER BY travelDate DESC, travelHour DESC, travelMinute DESC';
        }

        $tempResultIds = $this->getEntityManager()
            ->createQuery("SELECT rideDate.id, rideTown1.positionInRide as rideTownFrom, rideTown2.positionInRide as rideTownTo,


                              (SELECT MAX(rideTown7.busyPlacesGo)
                               FROM nxtcarMainBundle:RideTown rideTown7
                               JOIN rideTown7.ride ride7
                               WHERE ride7.id = mainRide.id
                               AND
                               ((
                                   rideTown7.positionInRide >= rideTown1.positionInRide
                                   AND rideTown7.positionInRide < rideTown2.positionInRide
                               )
                               OR (
                                   rideTown7.positionInRide < rideTown1.positionInRide
                                   AND rideTown7.positionInRide >= rideTown2.positionInRide
                               ))

                               ) busyPlaces,


                               (SELECT SUM(___rideTown.priceToNearest)
                               FROM nxtcarMainBundle:RideTown ___rideTown
                               JOIN ___rideTown.ride ___ride
                               WHERE ___ride.id = mainRide.id
                               AND

                               ((
                                   ___rideTown.positionInRide >= rideTown1.positionInRide
                                   AND ___rideTown.positionInRide < rideTown2.positionInRide
                               )
                               OR
                               (
                                   ___rideTown.positionInRide < rideTown1.positionInRide
                                   AND ___rideTown.positionInRide >= rideTown2.positionInRide
                               ))

                               ) price,


                               (CASE WHEN rideTown1.positionInRide < rideTown2.positionInRide THEN oneTime.outDate ELSE oneTime.inDate END) as travelDate,
                               (CASE WHEN rideTown1.positionInRide < rideTown2.positionInRide THEN oneTime.outHour ELSE oneTime.inHour END) as travelHour,
                               (CASE WHEN rideTown1.positionInRide < rideTown2.positionInRide THEN oneTime.outMinute ELSE oneTime.inMinute END) as travelMinute,
                               (CASE WHEN rideTown1.positionInRide < rideTown2.positionInRide THEN 0 ELSE 1 END) as travelDirection


                           FROM nxtcarMainBundle:RideDate rideDate
                           JOIN rideDate.ride mainRide
                           JOIN mainRide.rideTown rideTown1
                           JOIN mainRide.rideTown rideTown2
                           JOIN rideTown1.town town1
                           JOIN rideTown2.town town2
                           LEFT JOIN nxtcarMainBundle:OneTime oneTime
                           WITH oneTime.id = rideDate.id

                           WHERE
                           town1.name LIKE :townFrom AND
                           town2.name LIKE :townTo AND
                           ((
                               rideTown1.positionInRide < rideTown2.positionInRide
                               AND NOT EXISTS (SELECT rideTown3
                                               FROM nxtcarMainBundle:RideTown rideTown3
                                               JOIN rideTown3.ride ride1
                                               WHERE rideTown3.positionInRide >= rideTown1.positionInRide
                                               AND rideTown3.positionInRide < rideTown2.positionInRide
                                               AND rideTown3.busyPlacesGo = ride1.allPlaces
                                               AND ride1 = rideTown2.ride)
                           )
                           OR
                           (
                               rideTown1.positionInRide > rideTown2.positionInRide
                               AND rideDate.isRound = true
                               AND NOT EXISTS (SELECT rideTown4
                                               FROM nxtcarMainBundle:RideTown rideTown4
                                               JOIN rideTown4.ride ride2
                                               WHERE rideTown4.positionInRide > rideTown2.positionInRide
                                               AND rideTown4.positionInRide <= rideTown1.positionInRide
                                               AND rideTown4.busyPlacesReturn = ride2.allPlaces
                                               AND ride2 = rideTown2.ride)
                           ))
                           AND
                           (
                               rideDate INSTANCE OF nxtcarMainBundle:OneTime
                               AND
                               ((
                                   rideTown1.positionInRide < rideTown2.positionInRide
                                   $dateOutQueryCondition
                                   $fromOutQueryCondition
                                   $toOutQueryCondition
                               )
                               OR
                               (
                                   rideTown1.positionInRide > rideTown2.positionInRide
                                   AND rideDate.isRound = true
                                   $dateInQueryCondition
                                   $fromInQueryCondition
                                   $toInQueryCondition
                               ))
                           )
                           $orderBy
                           ")
            ->setParameter('townFrom', $from)
            ->setParameter('townTo', $to)
//            TODO will be opened
//            ->setFirstResult(($page - 1) * self::PAGE_COUNT)
//            ->setMaxResults(self::PAGE_COUNT + 1)
            ->getResult();


        $resultIds = $rideDateIds = array();
        foreach($tempResultIds as $resultId) {
            $rideDateIds[] = $resultId['id'];
            $resultIds[$resultId['id']] = $resultId;
        }

        $ridesDates = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('rideDate, rideTown, ride, town')
            ->from('nxtcarMainBundle:RideDate', 'rideDate')
            ->join('rideDate.ride', 'ride')
            ->join('ride.rideTown', 'rideTown')
            ->join('rideTown.town', 'town')
            ->where('rideDate.id IN (:rideDateIds)')
            ->andWhere('rideDate INSTANCE OF nxtcarMainBundle:OneTime')
            ->setParameter('rideDateIds', $rideDateIds)
            ->getQuery()
            ->getResult();

        $rides = array();
        foreach($ridesDates as $tempRideDate)
        {
            $resultId = $resultIds[$tempRideDate->getId()];
            $mainRide = clone $tempRideDate->getRide();

            if (is_null($mainRide)) {
                continue;
            }

            $dateTime = new \datetime($resultId['travelDate'] . ' ' .
                $resultId['travelHour'] . ':' . $resultId['travelMinute']);


            $mainRide->setDirection($resultId['travelDirection']);
            $mainRide->setMainRideDate($tempRideDate);
            $mainRide->setOutDate($dateTime);
            $mainRide->setPrice($resultId['price']);
            $mainRide->setFreePlaces($mainRide->getAllPlaces() - $resultId['busyPlaces']);

            $rides[] = $mainRide;
        }

        return $rides;
    }

    /**
     * @param $userId
     * @param bool $isPast
     * @return array
     */
    public function findOfferedRides($userId, $isPast = false)
    {
        $isNot = '';
        if ($isPast) {
            $isNot = 'NOT';
        }

        $rides = $this->getEntityManager()
            ->createQuery("SELECT ride, rideTown, town, rideDate
                           FROM nxtcarMainBundle:Ride ride
                           JOIN ride.rideTown rideTown
                           JOIN rideTown.town town
                           JOIN ride.rideDate rideDate
                           JOIN ride.driver driver

                           LEFT JOIN nxtcarMainBundle:Recurring recurring
                           WITH recurring.id = rideDate.id
                           LEFT JOIN nxtcarMainBundle:OneTime oneTime
                           WITH oneTime.id = rideDate.id

                           WHERE driver.id = $userId
                           AND $isNot
                           ((
                               rideDate INSTANCE OF nxtcarMainBundle:OneTime
                               AND
                               (
                                   oneTime.outDate >= CURRENT_DATE()
                                   OR (oneTime.inDate IS NOT NULL AND oneTime.inDate >= CURRENT_DATE())
                               )
                           )
                           OR
                           (
                               rideDate INSTANCE OF nxtcarMainBundle:Recurring
                               AND recurring.endDate >= CURRENT_DATE()
                           ))
                           ")
            ->getResult();

        $rideSums = $this->getEntityManager()
            ->createQuery("SELECT ride.id, SUM(rideTown.priceToNearest) as price, (ride.allPlaces - MAX(rideTown.busyPlacesGo)) as freePlaces
                           FROM nxtcarMainBundle:Ride ride
                           JOIN ride.rideTown rideTown
                           JOIN ride.driver driver

                           JOIN ride.rideDate rideDate
                           LEFT JOIN nxtcarMainBundle:Recurring recurring
                           WITH recurring.id = rideDate.id
                           LEFT JOIN nxtcarMainBundle:OneTime oneTime
                           WITH oneTime.id = rideDate.id

                           WHERE driver.id = $userId
                           AND $isNot
                           ((
                               rideDate INSTANCE OF nxtcarMainBundle:OneTime
                               AND
                               (
                                   oneTime.outDate >= CURRENT_DATE()
                                   OR (oneTime.inDate IS NOT NULL AND oneTime.inDate >= CURRENT_DATE())
                               )
                           )
                           OR
                           (
                               rideDate INSTANCE OF nxtcarMainBundle:Recurring
                               AND recurring.endDate >= CURRENT_DATE()
                           ))
                           GROUP BY ride")
            ->getResult();

        foreach($rides as $ride) {
            foreach($rideSums as $rideSum) {
                if ($rideSum['id'] == $ride->getId()) {
                    $ride->setPrice($rideSum['price']);
                    $ride->setFreePlaces($rideSum['freePlaces']);
                    break;
                }
            }
        }

        return $rides;
    }
}
