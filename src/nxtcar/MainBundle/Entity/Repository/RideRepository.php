<?php

namespace nxtcar\MainBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * RideRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RideRepository extends EntityRepository
{
    public function findRide($from, $to, $isRecurring = false, $date = null, $timeFrom = null, $timeTo = null)
    {
        $resultIds = $this->getEntityManager()
            ->createQuery("SELECT mainRide.id, rideTown1.positionInRide as rideTownFrom, rideTown2.positionInRide as rideTownTo
                           FROM nxtcarMainBundle:Ride mainRide
                           JOIN mainRide.rideTown rideTown1
                           JOIN mainRide.rideTown rideTown2
                           JOIN mainRide.rideDate rideDate
                           JOIN rideTown1.town town1
                           JOIN rideTown2.town town2

                           LEFT JOIN nxtcarMainBundle:Recurring recurring
                           WITH recurring.id = rideDate.id
                           LEFT JOIN nxtcarMainBundle:OneTime oneTime
                           WITH oneTime.id = rideDate.id

                           WHERE
                           town1.name LIKE :townFrom AND
                           town2.name LIKE :townTo AND
                           ((
                               rideTown1.positionInRide < rideTown2.positionInRide
                               AND NOT EXISTS (SELECT rideTown3
                                               FROM nxtcarMainBundle:RideTown rideTown3
                                               JOIN rideTown3.ride ride1
                                               WHERE rideTown3.positionInRide >= rideTown1.positionInRide
                                               AND rideTown3.positionInRide < rideTown2.positionInRide
                                               AND rideTown3.busyPlacesGo = ride1.allPlaces
                                               AND ride1 = rideTown2.ride)
                           )
                           OR
                           (
                               rideTown1.positionInRide > rideTown2.positionInRide
                               AND rideDate.isRound = true
                               AND NOT EXISTS (SELECT rideTown4
                                               FROM nxtcarMainBundle:RideTown rideTown4
                                               JOIN rideTown4.ride ride2
                                               WHERE rideTown4.positionInRide > rideTown2.positionInRide
                                               AND rideTown4.positionInRide <= rideTown1.positionInRide
                                               AND rideTown4.busyPlacesReturn = ride2.allPlaces
                                               AND ride2 = rideTown2.ride)
                           ))
                           AND
                           ((
                               rideDate INSTANCE OF nxtcarMainBundle:Recurring
                               AND recurring.endDate >= CURRENT_DATE()
                           )
                           OR
                           (
                               rideDate INSTANCE OF nxtcarMainBundle:OneTime
                               AND
                               ((
                                   rideTown1.positionInRide < rideTown2.positionInRide
                                   AND oneTime.outDate >= CURRENT_DATE()
                               )
                               OR
                               (
                                   rideTown1.positionInRide > rideTown2.positionInRide
                                   AND rideDate.isRound = true
                                   AND oneTime.inDate >= CURRENT_DATE()
                               ))
                           ))
                           ")
            ->setParameter('townFrom', $from)
            ->setParameter('townTo', $to)
            ->getResult();

        $rideIds = array_map(function($element){return $element["id"];}, $resultIds);

        $query =  $this->getEntityManager()
            ->createQueryBuilder()
            ->select('ride, rideTown, town, rideDate')
            ->from('nxtcarMainBundle:Ride', 'ride')
            ->join('ride.rideTown', 'rideTown')
            ->join('rideTown.town', 'town')
            ->join('ride.rideDate', 'rideDate')
            ->where('ride.id IN (:rideIds)');

        if ($isRecurring) {
            $query->andWhere('rideDate INSTANCE OF nxtcarMainBundle:Recurring');
        }
        else {
            $query->andWhere('rideDate INSTANCE OF nxtcarMainBundle:OneTime');

            if ($timeFrom || $timeTo || $date) {
                $query->join('nxtcarMainBundle:OneTime', 'oneTime with oneTime.id = rideDate.id');

                if ($date) {
                    $query->andWhere("oneTime.outDate = '$date' ");
                }
                if ($timeFrom) {
                    $query->andWhere("oneTime.outHour >= $timeFrom");
                }
                if ($timeTo) {
                    $query->andWhere("oneTime.outHour <= $timeTo");
                }
            }
        }

        $rides = $query
                ->setParameter('rideIds', $rideIds)
                ->getQuery()
                ->getResult();


        foreach($resultIds as $resultId)
        {
            if ($resultId['rideTownFrom'] < $resultId['rideTownTo']) {
                $prices = $this->getEntityManager()
                    ->createQuery("SELECT SUM(rideTown.priceToNearest) as price, (ride.allPlaces - MAX(rideTown.busyPlacesGo)) as freePlaces
                                   FROM nxtcarMainBundle:RideTown rideTown
                                   JOIN rideTown.ride ride
                                   WHERE ride.id = {$resultId['id']}
                                   AND rideTown.positionInRide >= {$resultId['rideTownFrom']}
                                   AND rideTown.positionInRide < {$resultId['rideTownTo']}")
                    ->getSingleResult();
            }
            else {
                $prices = $this->getEntityManager()
                    ->createQuery("SELECT SUM(rideTown.priceToNearest) as price, (ride.allPlaces - MAX(rideTown.busyPlacesReturn)) as freePlaces
                                   FROM nxtcarMainBundle:RideTown rideTown
                                   JOIN rideTown.ride ride
                                   WHERE ride.id = {$resultId['id']}
                                   AND rideTown.positionInRide < {$resultId['rideTownFrom']}
                                   AND rideTown.positionInRide >= {$resultId['rideTownTo']}")
                    ->getSingleResult();
            }

            foreach($rides as $ride) {
                if ($ride->getId() == $resultId['id']) {
                    $ride->setPrice($prices['price']);
                    $ride->setFreePlaces($prices['freePlaces']);
                }
            }
        }

        return $rides;
    }

    public function findOfferedRides($userId)
    {
        $rides = $this->getEntityManager()
            ->createQuery("SELECT ride, rideTown, town, rideDate
                           FROM nxtcarMainBundle:Ride ride
                           JOIN ride.rideTown rideTown
                           JOIN rideTown.town town
                           JOIN ride.rideDate rideDate
                           JOIN ride.driver driver
                           WHERE driver.id = $userId")
            ->getResult();

        $rideSums = $this->getEntityManager()
            ->createQuery("SELECT ride.id, SUM(rideTown.priceToNearest) as price, (ride.allPlaces - MAX(rideTown.busyPlacesGo)) as freePlaces
                           FROM nxtcarMainBundle:Ride ride
                           JOIN ride.rideTown rideTown
                           JOIN ride.driver driver
                           WHERE driver.id = $userId
                           GROUP BY ride")
            ->getResult();

        foreach($rides as $ride) {
            foreach($rideSums as $rideSum) {
                if ($rideSum['id'] == $ride->getId()) {
                    $ride->setPrice($rideSum['price']);
                    $ride->setFreePlaces($rideSum['freePlaces']);
                    break;
                }
            }
        }

        return $rides;
    }
}
