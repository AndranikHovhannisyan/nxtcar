<?php

namespace nxtcar\MainBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * RideRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RideRepository extends EntityRepository
{
    public function findRide($from, $to, $isRecurring = false, $date = null, $timeFrom = null, $timeTo = null)
    {
        $rideIds = $this->getEntityManager()
            ->createQuery("SELECT mainRide.id
                           FROM nxtcarMainBundle:Ride mainRide
                           JOIN mainRide.rideTown rideTown1
                           JOIN mainRide.rideTown rideTown2
                           JOIN mainRide.rideDate rideDate
                           JOIN rideTown1.town town1
                           JOIN rideTown2.town town2
                           WHERE
                           town1.name LIKE :townFrom AND
                           town2.name LIKE :townTo AND
                           ((
                               rideTown1.positionInRide < rideTown2.positionInRide
                               AND NOT EXISTS (SELECT rideTown3
                                               FROM nxtcarMainBundle:RideTown rideTown3
                                               JOIN rideTown3.ride ride1
                                               WHERE rideTown3.positionInRide >= rideTown1.positionInRide
                                               AND rideTown3.positionInRide < rideTown2.positionInRide
                                               AND rideTown3.busyPlacesGo = ride1.allPlaces
                                               AND ride1 = rideTown2.ride)
                           )
                           OR
                           (
                               rideTown1.positionInRide > rideTown2.positionInRide
                               AND rideDate.isRound = true
                               AND NOT EXISTS (SELECT rideTown4
                                               FROM nxtcarMainBundle:RideTown rideTown4
                                               JOIN rideTown4.ride ride2
                                               WHERE rideTown4.positionInRide > rideTown2.positionInRide
                                               AND rideTown4.positionInRide <= rideTown1.positionInRide
                                               AND rideTown4.busyPlacesReturn = ride2.allPlaces
                                               AND ride2 = rideTown2.ride)
                           ))
                           ")
            ->setParameter('townFrom', $from)
            ->setParameter('townTo', $to)
            ->getResult();

        $rideIds = array_map(function($element){return $element["id"];}, $rideIds);

        $query =  $this->getEntityManager()
            ->createQueryBuilder()
            ->select('ride, rideTown, town, rideDate')
            ->from('nxtcarMainBundle:Ride', 'ride')
            ->join('ride.rideTown', 'rideTown')
            ->join('rideTown.town', 'town')
            ->join('ride.rideDate', 'rideDate')
            ->where('ride.id IN (:rideIds)');

        if ($isRecurring) {
            $query->andWhere('rideDate INSTANCE OF nxtcarMainBundle:Recurring');
        }
        else {
            $query->andWhere('rideDate INSTANCE OF nxtcarMainBundle:OneTime');

            if ($timeFrom || $timeTo || $date) {
                $query->join('nxtcarMainBundle:OneTime', 'oneTime with oneTime.id = rideDate.id');

                if ($date) {
                    $query->andWhere("oneTime.outDate >= $date");
                }
                if ($timeFrom) {
                    $query->andWhere("oneTime.outHour >= $timeFrom");
                }
                if ($timeTo) {
                    $query->andWhere("oneTime.outHour <= $timeTo");
                }
            }
        }

        return $query
                ->setParameter('rideIds', $rideIds)
                ->getQuery()
                ->getResult();
    }
}
